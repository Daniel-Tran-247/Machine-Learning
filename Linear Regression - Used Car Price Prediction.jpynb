{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b3fd8315-a4b9-4bf0-9c95-65ba87fc767b",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Practical Example - Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f7d038b-2c6e-4877-abd2-a5dc343efe43",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### 1. Purpose\n",
    "> ***Predict the price*** of a used car depending on its specs\n",
    "\n",
    "### 2. Data Profiling\n",
    "- Possibly strong ***explanatory variables***: ```Brand```, ```Mileage```, ```EngineV```, ```Year```\n",
    "- ***Target:*** ```Price```\n",
    "\n",
    "### 3. Process \n",
    "\n",
    "| Events | Table |\n",
    "| ----- | -----|\n",
    "| [***read_csv***](#Loading-the-data) | raw_data | \n",
    "| [***drop column ```Model```***](#Determining-the-variables-of-interest---Drop-column(s)) | data | \n",
    "| [***drop N/A***](#Dealing-with-missing-values) | data_no_mv|\n",
    "| [***remove 1% higest outliers from ```Price```***](#1.1-Dealing-with-outliers-in-Price) | data_1 |\n",
    "| [***remove 1% highest outliers from ```Mileage```***](#2.1-Dealing-with-outliers-in-Mileage) | data_2 |\n",
    "| [***remove abnormal value from ```EngineV```***](#3.1-Remove-abnormal-value-of-EngineV) | data_3 |\n",
    "| [***remove 1% oldest cars from ```Year```***](#4.1-Remove-most-vintage-car) | data_4 |\n",
    "| [***reset_index for data_4***](#Final-table-for-preprocessing-step) | data_cleaned |\n",
    "| [***apply log transformation for the target ```Price```***](#Relaxing-the-assumption) | data_cleaned (replace ```Price``` by ```log_price```) |\n",
    "| [***check multicollinearity via VIF***](#Fifth-Assumption:-Multicollinearity) | data_no_multicolinearity |\n",
    "| [***get dummies for categorical variables***](#Create-dummy-variables)  | data_with_dummy |\n",
    "| [***rearrange***](#Rearrange-a-bit) | data_processed |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3882c75d-23e9-4eb2-8727-dacdbe096260",
   "metadata": {},
   "source": [
    "## Importing the relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "261bcc3c-d9d2-412d-a409-aa1c2b5a2d7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "sns.set() # Turn all Matplotlib's graphs to Seaborn's\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "369d696b-cee8-4c79-ad11-0133e9a91522",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Loading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9de3188f-6ac8-44f4-9560-67fc2fe87ebc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "      <th>Model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BMW</td>\n",
       "      <td>4200.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>277</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>1991</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>7900.0</td>\n",
       "      <td>van</td>\n",
       "      <td>427</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>1999</td>\n",
       "      <td>Sprinter 212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>13300.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>358</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Gas</td>\n",
       "      <td>yes</td>\n",
       "      <td>2003</td>\n",
       "      <td>S 500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Audi</td>\n",
       "      <td>23000.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>240</td>\n",
       "      <td>4.2</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2007</td>\n",
       "      <td>Q7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>18300.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>120</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2011</td>\n",
       "      <td>Rav 4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Brand    Price       Body  Mileage  EngineV Engine Type  \\\n",
       "0            BMW   4200.0      sedan      277      2.0      Petrol   \n",
       "1  Mercedes-Benz   7900.0        van      427      2.9      Diesel   \n",
       "2  Mercedes-Benz  13300.0      sedan      358      5.0         Gas   \n",
       "3           Audi  23000.0  crossover      240      4.2      Petrol   \n",
       "4         Toyota  18300.0  crossover      120      2.0      Petrol   \n",
       "\n",
       "  Registration  Year         Model  \n",
       "0          yes  1991           320  \n",
       "1          yes  1999  Sprinter 212  \n",
       "2          yes  2003         S 500  \n",
       "3          yes  2007            Q7  \n",
       "4          yes  2011         Rav 4  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data = pd.read_csv(\"C:/Users/baoph/OneDrive - Seneca/Documents/365 Data Science/Machine Learning/Linear Regression Practical Example (Part 1) Dataset/1.04. Real-life example.csv\")\n",
    "raw_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12749ffb-d0a2-41da-9e9b-b3bf6aa6c6b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4345, 9)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d4a9c1f-85b1-4a47-8529-1d1f137952b8",
   "metadata": {},
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f14a11c8-a453-44fe-978f-1bc4d05db701",
   "metadata": {},
   "source": [
    "### Exploring the descriptive statistics of the variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b510bc60-a7ba-4377-bcaa-829e59f9ebd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "      <th>Model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4345</td>\n",
       "      <td>4173.000000</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345.000000</td>\n",
       "      <td>4195.000000</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345.000000</td>\n",
       "      <td>4345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>E-Class</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>936</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019</td>\n",
       "      <td>3947</td>\n",
       "      <td>NaN</td>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19418.746935</td>\n",
       "      <td>NaN</td>\n",
       "      <td>161.237284</td>\n",
       "      <td>2.790734</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.550058</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>25584.242620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.705797</td>\n",
       "      <td>5.066437</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.719097</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1969.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6999.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11500.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21700.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>980.000000</td>\n",
       "      <td>99.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         4345    4173.000000   4345  4345.000000  4195.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           936            NaN   1649          NaN          NaN   \n",
       "mean           NaN   19418.746935    NaN   161.237284     2.790734   \n",
       "std            NaN   25584.242620    NaN   105.705797     5.066437   \n",
       "min            NaN     600.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    6999.000000    NaN    86.000000     1.800000   \n",
       "50%            NaN   11500.000000    NaN   155.000000     2.200000   \n",
       "75%            NaN   21700.000000    NaN   230.000000     3.000000   \n",
       "max            NaN  300000.000000    NaN   980.000000    99.990000   \n",
       "\n",
       "       Engine Type Registration         Year    Model  \n",
       "count         4345         4345  4345.000000     4345  \n",
       "unique           4            2          NaN      312  \n",
       "top         Diesel          yes          NaN  E-Class  \n",
       "freq          2019         3947          NaN      199  \n",
       "mean           NaN          NaN  2006.550058      NaN  \n",
       "std            NaN          NaN     6.719097      NaN  \n",
       "min            NaN          NaN  1969.000000      NaN  \n",
       "25%            NaN          NaN  2003.000000      NaN  \n",
       "50%            NaN          NaN  2008.000000      NaN  \n",
       "75%            NaN          NaN  2012.000000      NaN  \n",
       "max            NaN          NaN  2016.000000      NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.describe(include= 'all') # include descriptives for category var too"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66327e8b-4614-4189-a73a-d76b9861e88c",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "- ***Misssing value***: Look at count row. ```Price``` and ```EngineV``` seems to be missing some of values\n",
    "\n",
    "- ***Unique entries*** of each ```cat var```: ***```Model```*** has ***312 unique entries***, which is **hard to implement*** the regression (It means we have more than ***300 dummies***) \n",
    "\n",
    "- Number of car has been register ***```Registration``` = 'yes'*** is ***significantly high*** (***90%*** total of entries - almost all of them) **--> Won't be useful**\n",
    "\n",
    "- A lot of the information from ```Model``` could be engineered from ```Brand```, ```Year```, and ```EngineV``` --> **Won't be losing too much variability**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "988e04ed-a3c1-4b37-9186-0fe38737736d",
   "metadata": {},
   "source": [
    "### Determining the variables of interest - Drop column(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e23770ff-b1ce-4348-8a29-0a637e8f84c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4345</td>\n",
       "      <td>4173.000000</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345.000000</td>\n",
       "      <td>4195.000000</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345</td>\n",
       "      <td>4345.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>936</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019</td>\n",
       "      <td>3947</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19418.746935</td>\n",
       "      <td>NaN</td>\n",
       "      <td>161.237284</td>\n",
       "      <td>2.790734</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.550058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>25584.242620</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.705797</td>\n",
       "      <td>5.066437</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.719097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6999.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11500.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21700.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>980.000000</td>\n",
       "      <td>99.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         4345    4173.000000   4345  4345.000000  4195.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           936            NaN   1649          NaN          NaN   \n",
       "mean           NaN   19418.746935    NaN   161.237284     2.790734   \n",
       "std            NaN   25584.242620    NaN   105.705797     5.066437   \n",
       "min            NaN     600.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    6999.000000    NaN    86.000000     1.800000   \n",
       "50%            NaN   11500.000000    NaN   155.000000     2.200000   \n",
       "75%            NaN   21700.000000    NaN   230.000000     3.000000   \n",
       "max            NaN  300000.000000    NaN   980.000000    99.990000   \n",
       "\n",
       "       Engine Type Registration         Year  \n",
       "count         4345         4345  4345.000000  \n",
       "unique           4            2          NaN  \n",
       "top         Diesel          yes          NaN  \n",
       "freq          2019         3947          NaN  \n",
       "mean           NaN          NaN  2006.550058  \n",
       "std            NaN          NaN     6.719097  \n",
       "min            NaN          NaN  1969.000000  \n",
       "25%            NaN          NaN  2003.000000  \n",
       "50%            NaN          NaN  2008.000000  \n",
       "75%            NaN          NaN  2012.000000  \n",
       "max            NaN          NaN  2016.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = raw_data.drop(['Model'], axis=1) # Drop [Model] column\n",
    "data.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d31da555-d176-4a7c-a659-c9eb32dfd06c",
   "metadata": {},
   "source": [
    "### Dealing with missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f388200-a964-4840-8b5f-a54526ac0092",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand           0.000000\n",
       "Price           3.958573\n",
       "Body            0.000000\n",
       "Mileage         0.000000\n",
       "EngineV         3.452244\n",
       "Engine Type     0.000000\n",
       "Registration    0.000000\n",
       "Year            0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()/data.shape[0]*100 # % of missing values for each var"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9f13b8a-1af5-411a-a80c-70ec90e08ba4",
   "metadata": {},
   "source": [
    "##### Rule of thumb:\n",
    "> If you are ***removing <5% of the observations***, you are free to ust remove all that have Missing Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60d1fdbc-69cb-4453-b23a-fdfd47a980e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_no_mv = data.dropna(axis=0) # Drop N/A by row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0fb3af20-9851-47da-90fd-dbe44c8d9709",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4025</td>\n",
       "      <td>4025.000000</td>\n",
       "      <td>4025</td>\n",
       "      <td>4025.000000</td>\n",
       "      <td>4025.000000</td>\n",
       "      <td>4025</td>\n",
       "      <td>4025</td>\n",
       "      <td>4025.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>880</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1534</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1861</td>\n",
       "      <td>3654</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19552.308065</td>\n",
       "      <td>NaN</td>\n",
       "      <td>163.572174</td>\n",
       "      <td>2.764586</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.379627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>25815.734988</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103.394703</td>\n",
       "      <td>4.935941</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.695595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6999.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11500.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>158.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21900.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>980.000000</td>\n",
       "      <td>99.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         4025    4025.000000   4025  4025.000000  4025.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           880            NaN   1534          NaN          NaN   \n",
       "mean           NaN   19552.308065    NaN   163.572174     2.764586   \n",
       "std            NaN   25815.734988    NaN   103.394703     4.935941   \n",
       "min            NaN     600.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    6999.000000    NaN    90.000000     1.800000   \n",
       "50%            NaN   11500.000000    NaN   158.000000     2.200000   \n",
       "75%            NaN   21900.000000    NaN   230.000000     3.000000   \n",
       "max            NaN  300000.000000    NaN   980.000000    99.990000   \n",
       "\n",
       "       Engine Type Registration         Year  \n",
       "count         4025         4025  4025.000000  \n",
       "unique           4            2          NaN  \n",
       "top         Diesel          yes          NaN  \n",
       "freq          1861         3654          NaN  \n",
       "mean           NaN          NaN  2006.379627  \n",
       "std            NaN          NaN     6.695595  \n",
       "min            NaN          NaN  1969.000000  \n",
       "25%            NaN          NaN  2003.000000  \n",
       "50%            NaN          NaN  2007.000000  \n",
       "75%            NaN          NaN  2012.000000  \n",
       "max            NaN          NaN  2016.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_no_mv.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "772ef5cc-7930-4fe5-9eaa-f29e794126b8",
   "metadata": {},
   "source": [
    "### Exploring the PDFs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "affe52b3-12af-46da-ba48-b5769894436b",
   "metadata": {},
   "source": [
    "#### 1. Distribution of ```Price```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "80be35be-e5f0-4e1e-85fc-9a78745cb277",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1867fa064f0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data_no_mv.Price) # Plot Price Distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df548500-e1b7-409b-8dd1-9b2999887623",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "\n",
    "- ```Price``` has an ***exponential*** distribution\n",
    "\n",
    "- For ***optimal results*** we would be looking for a ***normal distribution***\n",
    "\n",
    "- We have a few ***outliers*** in ```Price``` --> **Remove the top 1% of observation**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9fcb0a2-2e59-435e-99b8-63b9eebdc9e4",
   "metadata": {},
   "source": [
    "#### 1.1 Dealing with outliers in ```Price```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e184aa60-50e6-40f4-bc36-2824c8e245e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3984</td>\n",
       "      <td>3984.000000</td>\n",
       "      <td>3984</td>\n",
       "      <td>3984.000000</td>\n",
       "      <td>3984.000000</td>\n",
       "      <td>3984</td>\n",
       "      <td>3984</td>\n",
       "      <td>3984.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>880</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1528</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1853</td>\n",
       "      <td>3613</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>17837.117460</td>\n",
       "      <td>NaN</td>\n",
       "      <td>165.116466</td>\n",
       "      <td>2.743770</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.292922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18976.268315</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102.766126</td>\n",
       "      <td>4.956057</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.672745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6980.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11400.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>160.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2011.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>129222.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>980.000000</td>\n",
       "      <td>99.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         3984    3984.000000   3984  3984.000000  3984.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           880            NaN   1528          NaN          NaN   \n",
       "mean           NaN   17837.117460    NaN   165.116466     2.743770   \n",
       "std            NaN   18976.268315    NaN   102.766126     4.956057   \n",
       "min            NaN     600.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    6980.000000    NaN    93.000000     1.800000   \n",
       "50%            NaN   11400.000000    NaN   160.000000     2.200000   \n",
       "75%            NaN   21000.000000    NaN   230.000000     3.000000   \n",
       "max            NaN  129222.000000    NaN   980.000000    99.990000   \n",
       "\n",
       "       Engine Type Registration         Year  \n",
       "count         3984         3984  3984.000000  \n",
       "unique           4            2          NaN  \n",
       "top         Diesel          yes          NaN  \n",
       "freq          1853         3613          NaN  \n",
       "mean           NaN          NaN  2006.292922  \n",
       "std            NaN          NaN     6.672745  \n",
       "min            NaN          NaN  1969.000000  \n",
       "25%            NaN          NaN  2002.750000  \n",
       "50%            NaN          NaN  2007.000000  \n",
       "75%            NaN          NaN  2011.000000  \n",
       "max            NaN          NaN  2016.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = data_no_mv.Price.quantile(0.99)\n",
    "data_1 = data_no_mv[data_no_mv.Price < q]\n",
    "data_1.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48ab3c7e-5d1c-435f-aa7c-9baae384a5b3",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "\n",
    "- After removing outliers, the ***MAX(Price)*** is far away higher than the ***MEAN(Price)***, it is still acceptably closer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "926a9750-6a13-4564-968a-89843950d6cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Price', ylabel='Density'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_1.Price)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f357190d-63d8-4819-b7db-0773b01743aa",
   "metadata": {},
   "source": [
    "#### 2. Distribution of ```Mileage```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d17d4cb5-017d-441a-9f85-713e23e3d6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1860128f700>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data_no_mv.Mileage) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f28afd7d-2397-45f0-a1d7-3895317e9b2e",
   "metadata": {},
   "source": [
    "#### 2.1 Dealing with outliers in ```Mileage```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3952d4ea-2b81-4d16-bf8b-493e291426de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3944</td>\n",
       "      <td>3944.000000</td>\n",
       "      <td>3944</td>\n",
       "      <td>3944.000000</td>\n",
       "      <td>3944.000000</td>\n",
       "      <td>3944</td>\n",
       "      <td>3944</td>\n",
       "      <td>3944.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>867</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1511</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1825</td>\n",
       "      <td>3576</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>17933.880822</td>\n",
       "      <td>NaN</td>\n",
       "      <td>161.484026</td>\n",
       "      <td>2.747612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.389959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19008.212025</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96.027108</td>\n",
       "      <td>4.980406</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.595986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>7000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11500.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>158.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21376.250000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2011.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>129222.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>435.000000</td>\n",
       "      <td>99.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         3944    3944.000000   3944  3944.000000  3944.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           867            NaN   1511          NaN          NaN   \n",
       "mean           NaN   17933.880822    NaN   161.484026     2.747612   \n",
       "std            NaN   19008.212025    NaN    96.027108     4.980406   \n",
       "min            NaN     600.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    7000.000000    NaN    92.000000     1.800000   \n",
       "50%            NaN   11500.000000    NaN   158.000000     2.200000   \n",
       "75%            NaN   21376.250000    NaN   230.000000     3.000000   \n",
       "max            NaN  129222.000000    NaN   435.000000    99.990000   \n",
       "\n",
       "       Engine Type Registration         Year  \n",
       "count         3944         3944  3944.000000  \n",
       "unique           4            2          NaN  \n",
       "top         Diesel          yes          NaN  \n",
       "freq          1825         3576          NaN  \n",
       "mean           NaN          NaN  2006.389959  \n",
       "std            NaN          NaN     6.595986  \n",
       "min            NaN          NaN  1969.000000  \n",
       "25%            NaN          NaN  2003.000000  \n",
       "50%            NaN          NaN  2007.000000  \n",
       "75%            NaN          NaN  2011.000000  \n",
       "max            NaN          NaN  2016.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q_1 = data_1.Mileage.quantile(0.99)\n",
    "data_2 = data_1[data_1.Mileage < q_1]\n",
    "data_2.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d3ad6afc-2aed-46c8-911b-9a322db3b3e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Mileage', ylabel='Density'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_2.Mileage)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aff9b3c1-5fe4-427f-bf7d-6498f1fd30a2",
   "metadata": {},
   "source": [
    "#### 3. Distribution of ```EngineV```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ed00f988-0777-44f2-bd88-4e370046a062",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='EngineV', ylabel='Density'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_no_mv.EngineV)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d7fa728-a650-4eec-8dc1-f8ddda5f1fa1",
   "metadata": {},
   "source": [
    "##### Some Notes: \n",
    "\n",
    "- Take a look at ```EngineV``` we see there is many ***strange*** value like ***99.99***. The interval of the ```EngineV``` normally low ***[0.6; 6.5]*** **--> 99.99 is incorrect entry** (That's a common way to label missing values)\n",
    "**--> Chose the engine volumn below 6.5**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "23ca453e-844c-4594-bfab-8628ac7c4e4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EngineV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2512</th>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3295</th>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2725</th>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1923</th>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1311</th>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3114</th>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1264</th>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3641</th>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256</th>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4195 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      EngineV\n",
       "2512     0.60\n",
       "188      0.65\n",
       "3295     1.00\n",
       "2725     1.00\n",
       "1923     1.00\n",
       "...       ...\n",
       "1311    99.99\n",
       "3114    99.99\n",
       "1264    99.99\n",
       "3641    99.99\n",
       "256     99.99\n",
       "\n",
       "[4195 rows x 1 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EngV = pd.DataFrame(raw_data.EngineV)\n",
    "EngV = EngV.dropna(axis=0)\n",
    "EngV.sort_values(by=\"EngineV\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ac9ccac-a48c-40fe-9d08-88050ded04f6",
   "metadata": {},
   "source": [
    "#### 3.1 Remove abnormal value of ```EngineV```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c785861-dbaa-46cd-bd7b-6226aeefd455",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_3 = data_2[data_2.EngineV < 6.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "88ad0588-ab70-4e99-bcb2-f2015dde466b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='EngineV', ylabel='Density'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_3.EngineV)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e66a8dc2-c2d9-4d32-bc1c-ade19ecce737",
   "metadata": {},
   "source": [
    "#### 4. Distribution of ```Year```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "546f6197-3ce9-4b97-9f38-39ad6c93608e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Year', ylabel='Density'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_3.Year)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c9d7d15-a06d-4f34-a9d0-0e4349a44bef",
   "metadata": {},
   "source": [
    "#### 4.1 Remove most vintage car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "43dc14e6-29d3-4e69-b875-36c86d0177ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "q_3 = data_3.Year.quantile(0.01)\n",
    "data_4 = data_3[data_3.Year>q_3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "73eef959-bd16-4665-8bbc-f95a070839c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Year', ylabel='Density'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_4.Year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3359cda3-75df-414f-a538-ade48e204b9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BMW</td>\n",
       "      <td>4200.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>277</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>1991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>7900.0</td>\n",
       "      <td>van</td>\n",
       "      <td>427</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>13300.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>358</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Gas</td>\n",
       "      <td>yes</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Audi</td>\n",
       "      <td>23000.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>240</td>\n",
       "      <td>4.2</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>18300.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>120</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3862</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>11500.0</td>\n",
       "      <td>van</td>\n",
       "      <td>163</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3863</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>17900.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>35</td>\n",
       "      <td>1.6</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3864</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3865</th>\n",
       "      <td>BMW</td>\n",
       "      <td>6500.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3866</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>13500.0</td>\n",
       "      <td>van</td>\n",
       "      <td>124</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3867 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Brand     Price       Body  Mileage  EngineV Engine Type  \\\n",
       "0               BMW    4200.0      sedan      277      2.0      Petrol   \n",
       "1     Mercedes-Benz    7900.0        van      427      2.9      Diesel   \n",
       "2     Mercedes-Benz   13300.0      sedan      358      5.0         Gas   \n",
       "3              Audi   23000.0  crossover      240      4.2      Petrol   \n",
       "4            Toyota   18300.0  crossover      120      2.0      Petrol   \n",
       "...             ...       ...        ...      ...      ...         ...   \n",
       "3862     Volkswagen   11500.0        van      163      2.5      Diesel   \n",
       "3863         Toyota   17900.0      sedan       35      1.6      Petrol   \n",
       "3864  Mercedes-Benz  125000.0      sedan        9      3.0      Diesel   \n",
       "3865            BMW    6500.0      sedan        1      3.5      Petrol   \n",
       "3866     Volkswagen   13500.0        van      124      2.0      Diesel   \n",
       "\n",
       "     Registration  Year  \n",
       "0             yes  1991  \n",
       "1             yes  1999  \n",
       "2             yes  2003  \n",
       "3             yes  2007  \n",
       "4             yes  2011  \n",
       "...           ...   ...  \n",
       "3862          yes  2008  \n",
       "3863          yes  2014  \n",
       "3864          yes  2014  \n",
       "3865          yes  1999  \n",
       "3866          yes  2013  \n",
       "\n",
       "[3867 rows x 8 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cleaned = data_4.reset_index(drop=True)\n",
    "data_cleaned"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbde6bff-cd48-4519-81f4-bd5b169f745f",
   "metadata": {},
   "source": [
    "### Final table for preprocessing step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d77735f2-e17d-46e0-ab6e-01a9977a37e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3867</td>\n",
       "      <td>3867.000000</td>\n",
       "      <td>3867</td>\n",
       "      <td>3867.000000</td>\n",
       "      <td>3867.000000</td>\n",
       "      <td>3867</td>\n",
       "      <td>3867</td>\n",
       "      <td>3867.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>848</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1467</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1807</td>\n",
       "      <td>3505</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18194.455679</td>\n",
       "      <td>NaN</td>\n",
       "      <td>160.542539</td>\n",
       "      <td>2.450440</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2006.709853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19085.855165</td>\n",
       "      <td>NaN</td>\n",
       "      <td>95.633291</td>\n",
       "      <td>0.949366</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.103870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1988.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>7200.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11700.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>157.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21700.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>225.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>129222.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>435.000000</td>\n",
       "      <td>6.300000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Brand          Price   Body      Mileage      EngineV  \\\n",
       "count         3867    3867.000000   3867  3867.000000  3867.000000   \n",
       "unique           7            NaN      6          NaN          NaN   \n",
       "top     Volkswagen            NaN  sedan          NaN          NaN   \n",
       "freq           848            NaN   1467          NaN          NaN   \n",
       "mean           NaN   18194.455679    NaN   160.542539     2.450440   \n",
       "std            NaN   19085.855165    NaN    95.633291     0.949366   \n",
       "min            NaN     800.000000    NaN     0.000000     0.600000   \n",
       "25%            NaN    7200.000000    NaN    91.000000     1.800000   \n",
       "50%            NaN   11700.000000    NaN   157.000000     2.200000   \n",
       "75%            NaN   21700.000000    NaN   225.000000     3.000000   \n",
       "max            NaN  129222.000000    NaN   435.000000     6.300000   \n",
       "\n",
       "       Engine Type Registration         Year  \n",
       "count         3867         3867  3867.000000  \n",
       "unique           4            2          NaN  \n",
       "top         Diesel          yes          NaN  \n",
       "freq          1807         3505          NaN  \n",
       "mean           NaN          NaN  2006.709853  \n",
       "std            NaN          NaN     6.103870  \n",
       "min            NaN          NaN  1988.000000  \n",
       "25%            NaN          NaN  2003.000000  \n",
       "50%            NaN          NaN  2008.000000  \n",
       "75%            NaN          NaN  2012.000000  \n",
       "max            NaN          NaN  2016.000000  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cleaned.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f51df27-fd44-4f27-a07e-740247a09abe",
   "metadata": {},
   "source": [
    "## Checking the OLS assumption"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f0bc204-c3d9-4a11-be36-4b6f892cd61d",
   "metadata": {},
   "source": [
    "### First Assumption: Linearity "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "315adc53-03f3-4001-88e9-7a3e44827087",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Price and Mileage')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,3))\n",
    "\n",
    "axes[0].scatter(data_cleaned.Year, data_cleaned.Price)\n",
    "axes[0].set_title(\"Price and Year\", fontsize=13)\n",
    "\n",
    "axes[1].scatter(data_cleaned.EngineV, data_cleaned.Price)\n",
    "axes[1].set_title(\"Price and EngineV\", fontsize=13)\n",
    "\n",
    "axes[2].scatter(data_cleaned.Mileage, data_cleaned.Price)\n",
    "axes[2].set_title(\"Price and Mileage\", fontsize=13)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fc7c79e-ca97-41a8-9e12-fe471965820c",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "\n",
    "- We can spot the patterns but definitely not Linear one **--> Should not run Linear Regression this case (Assumption 1)**\n",
    "\n",
    "--> Should first **transform one or more variables**\n",
    "--> **Log Tranformation** is especially useful when dealing with exponential scatter plots like we do now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fc5feb1b-c819-4f1a-8e54-750142cf5ad9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Price', ylabel='Density'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_cleaned.Price)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd5a7ff2-ca37-46a3-a4ca-abf21bd7f166",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "- ```Price``` is ***not normally distributed***\n",
    "\n",
    "**--> It's relationship with other normally distributed features is not linear** (quite exponential in those cases) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6517e989-3b8c-4caa-926e-c69f9c8a9ae0",
   "metadata": {},
   "source": [
    "### Relaxing the assumption"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d8159a91-e1c8-42aa-becb-a39a3c9574e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Engine Type</th>\n",
       "      <th>Registration</th>\n",
       "      <th>Year</th>\n",
       "      <th>log_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BMW</td>\n",
       "      <td>4200.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>277</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>1991</td>\n",
       "      <td>8.342840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>7900.0</td>\n",
       "      <td>van</td>\n",
       "      <td>427</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>1999</td>\n",
       "      <td>8.974618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>13300.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>358</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Gas</td>\n",
       "      <td>yes</td>\n",
       "      <td>2003</td>\n",
       "      <td>9.495519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Audi</td>\n",
       "      <td>23000.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>240</td>\n",
       "      <td>4.2</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2007</td>\n",
       "      <td>10.043249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>18300.0</td>\n",
       "      <td>crossover</td>\n",
       "      <td>120</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2011</td>\n",
       "      <td>9.814656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3862</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>11500.0</td>\n",
       "      <td>van</td>\n",
       "      <td>163</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2008</td>\n",
       "      <td>9.350102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3863</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>17900.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>35</td>\n",
       "      <td>1.6</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>2014</td>\n",
       "      <td>9.792556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3864</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2014</td>\n",
       "      <td>11.736069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3865</th>\n",
       "      <td>BMW</td>\n",
       "      <td>6500.0</td>\n",
       "      <td>sedan</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>yes</td>\n",
       "      <td>1999</td>\n",
       "      <td>8.779557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3866</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>13500.0</td>\n",
       "      <td>van</td>\n",
       "      <td>124</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>yes</td>\n",
       "      <td>2013</td>\n",
       "      <td>9.510445</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3867 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Brand     Price       Body  Mileage  EngineV Engine Type  \\\n",
       "0               BMW    4200.0      sedan      277      2.0      Petrol   \n",
       "1     Mercedes-Benz    7900.0        van      427      2.9      Diesel   \n",
       "2     Mercedes-Benz   13300.0      sedan      358      5.0         Gas   \n",
       "3              Audi   23000.0  crossover      240      4.2      Petrol   \n",
       "4            Toyota   18300.0  crossover      120      2.0      Petrol   \n",
       "...             ...       ...        ...      ...      ...         ...   \n",
       "3862     Volkswagen   11500.0        van      163      2.5      Diesel   \n",
       "3863         Toyota   17900.0      sedan       35      1.6      Petrol   \n",
       "3864  Mercedes-Benz  125000.0      sedan        9      3.0      Diesel   \n",
       "3865            BMW    6500.0      sedan        1      3.5      Petrol   \n",
       "3866     Volkswagen   13500.0        van      124      2.0      Diesel   \n",
       "\n",
       "     Registration  Year  log_price  \n",
       "0             yes  1991   8.342840  \n",
       "1             yes  1999   8.974618  \n",
       "2             yes  2003   9.495519  \n",
       "3             yes  2007  10.043249  \n",
       "4             yes  2011   9.814656  \n",
       "...           ...   ...        ...  \n",
       "3862          yes  2008   9.350102  \n",
       "3863          yes  2014   9.792556  \n",
       "3864          yes  2014  11.736069  \n",
       "3865          yes  1999   8.779557  \n",
       "3866          yes  2013   9.510445  \n",
       "\n",
       "[3867 rows x 9 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_price = np.log(data_cleaned.Price)\n",
    "data_cleaned[\"log_price\"] = log_price\n",
    "data_cleaned"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace460c3-7e9a-49d5-ad70-2c29e67872ef",
   "metadata": {},
   "source": [
    "##### Some Notes: \n",
    "- Now ```log_price``` distribution is approiximately ***bell-shaped***\n",
    "- We can see the ***linear patterns*** in all plots now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "31bc8502-7434-4938-8950-1d7524f2f2a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='log_price', ylabel='Density'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data_cleaned.log_price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "55cbda52-24a6-4629-a6c4-2d22bc13e21b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'log_price and Mileage')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,3))\n",
    "\n",
    "axes[0].scatter(data_cleaned.Year, data_cleaned.log_price)\n",
    "axes[0].set_title(\"log_price and Year\", fontsize=13)\n",
    "\n",
    "axes[1].scatter(data_cleaned.EngineV, data_cleaned.log_price)\n",
    "axes[1].set_title(\"log_price and EngineV\", fontsize=13)\n",
    "\n",
    "axes[2].scatter(data_cleaned.Mileage, data_cleaned.log_price)\n",
    "axes[2].set_title(\"log_price and Mileage\", fontsize=13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "40126565-ee3e-4d17-9322-fb8b5185ba2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_cleaned = data_cleaned.drop(\"Price\", axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c40a0cd4-f7c8-4984-b0ae-648ffb28f57c",
   "metadata": {},
   "source": [
    "### Second Assumption: No Endogeneity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2be16ad-045b-42d6-a394-9b544baee2c5",
   "metadata": {},
   "source": [
    "### Third Assumption: Normality and Homoscedasticity\n",
    "\n",
    "- ***Normality and zero mean***: $residual-N(0,var^2)$\n",
    "- ***Homoscedasticity***: as we can see from the graphs, because we already implemented a log transformation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f26bc75-5bf8-463d-95ff-a6f7502e20b2",
   "metadata": {},
   "source": [
    "### Fourth Assumption: No Autocorrelation\n",
    "- The observations we have are ***not coming from time series data or panel data***, so do not need too much effort on that\n",
    "- There is no reason for the observations to be dependent on each other in this car sales case"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c47769b1-dce7-4987-a3f5-391507d0e588",
   "metadata": {},
   "source": [
    "### Fifth Assumption: Multicollinearity\n",
    "- It is logical that ```Year``` and ```Mileage``` will be correlated. The newer the car. the lower its mileage\n",
    "\n",
    "---> **Have ground to suspect some degree of multicilinearity in the data**\n",
    "\n",
    "---> Check multicolinearity through ***Variance Inflation Factor (VIF)***.\n",
    "> VIF produces a measure that estimates how much larger the square root of the standard error of an estimate is compared to a situation where the variable is completely uncorrelated to the other predictors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "39629201-1791-4523-9e36-e4e05c4e2ef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "variables = data_cleaned[[\"Mileage\",\"Year\",\"EngineV\"]]\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif[\"VIF\"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\n",
    "vif[\"features\"] = variables.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6e154a80-ed07-4958-9de4-997dddd9ebab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.791584</td>\n",
       "      <td>Mileage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.354854</td>\n",
       "      <td>Year</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.662068</td>\n",
       "      <td>EngineV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VIF features\n",
       "0   3.791584  Mileage\n",
       "1  10.354854     Year\n",
       "2   7.662068  EngineV"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "15c3c95a-fd82-4138-81ae-86fbe9e5e49f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_no_multicollinearity = data_cleaned.drop(\"Year\", axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "965a32b0-e8a4-4945-8953-e01753456ae3",
   "metadata": {},
   "source": [
    "$VIF \\in [1, inf)$\n",
    "\n",
    "- $VIF = 1$: **No Multicollinearity**\n",
    "- $1 < VIF < 5$: **Perfectly okay** \n",
    "- $5/6/10 < VIF$: **unacceptable** (cut-off line varies from sources to sources)\n",
    "\n",
    "##### Some Notes:\n",
    "- It seems like ```Year``` is defintely ***too correlated with the other variables*** **---> Only remove ```Year```**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1986e696-acb2-4d5a-8be6-5e1c31d20219",
   "metadata": {},
   "source": [
    "## Create dummy variables "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4f863ba1-d0f3-41fc-aa8e-997797631c46",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_with_dummies = pd.get_dummies(data_no_multicollinearity, drop_first=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "222ff385-77d4-45b8-99fd-50d8167d550c",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "\n",
    "- ```Drop_first = True``` to make sure that it ***won't create data for the first items of each category***\n",
    "\n",
    "- If not, we are introducing ***multicolinearity*** to the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "36689eb9-07f5-4bc1-a647-8d2d1cdc5f29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>log_price</th>\n",
       "      <th>Brand_BMW</th>\n",
       "      <th>Brand_Mercedes-Benz</th>\n",
       "      <th>Brand_Mitsubishi</th>\n",
       "      <th>Brand_Renault</th>\n",
       "      <th>Brand_Toyota</th>\n",
       "      <th>Brand_Volkswagen</th>\n",
       "      <th>Body_hatch</th>\n",
       "      <th>Body_other</th>\n",
       "      <th>Body_sedan</th>\n",
       "      <th>Body_vagon</th>\n",
       "      <th>Body_van</th>\n",
       "      <th>Engine Type_Gas</th>\n",
       "      <th>Engine Type_Other</th>\n",
       "      <th>Engine Type_Petrol</th>\n",
       "      <th>Registration_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>277</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.342840</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>427</td>\n",
       "      <td>2.9</td>\n",
       "      <td>8.974618</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>358</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9.495519</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>240</td>\n",
       "      <td>4.2</td>\n",
       "      <td>10.043249</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.814656</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3862</th>\n",
       "      <td>163</td>\n",
       "      <td>2.5</td>\n",
       "      <td>9.350102</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3863</th>\n",
       "      <td>35</td>\n",
       "      <td>1.6</td>\n",
       "      <td>9.792556</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3864</th>\n",
       "      <td>9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>11.736069</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3865</th>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>8.779557</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3866</th>\n",
       "      <td>124</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.510445</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3867 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Mileage  EngineV  log_price  Brand_BMW  Brand_Mercedes-Benz  \\\n",
       "0         277      2.0   8.342840          1                    0   \n",
       "1         427      2.9   8.974618          0                    1   \n",
       "2         358      5.0   9.495519          0                    1   \n",
       "3         240      4.2  10.043249          0                    0   \n",
       "4         120      2.0   9.814656          0                    0   \n",
       "...       ...      ...        ...        ...                  ...   \n",
       "3862      163      2.5   9.350102          0                    0   \n",
       "3863       35      1.6   9.792556          0                    0   \n",
       "3864        9      3.0  11.736069          0                    1   \n",
       "3865        1      3.5   8.779557          1                    0   \n",
       "3866      124      2.0   9.510445          0                    0   \n",
       "\n",
       "      Brand_Mitsubishi  Brand_Renault  Brand_Toyota  Brand_Volkswagen  \\\n",
       "0                    0              0             0                 0   \n",
       "1                    0              0             0                 0   \n",
       "2                    0              0             0                 0   \n",
       "3                    0              0             0                 0   \n",
       "4                    0              0             1                 0   \n",
       "...                ...            ...           ...               ...   \n",
       "3862                 0              0             0                 1   \n",
       "3863                 0              0             1                 0   \n",
       "3864                 0              0             0                 0   \n",
       "3865                 0              0             0                 0   \n",
       "3866                 0              0             0                 1   \n",
       "\n",
       "      Body_hatch  Body_other  Body_sedan  Body_vagon  Body_van  \\\n",
       "0              0           0           1           0         0   \n",
       "1              0           0           0           0         1   \n",
       "2              0           0           1           0         0   \n",
       "3              0           0           0           0         0   \n",
       "4              0           0           0           0         0   \n",
       "...          ...         ...         ...         ...       ...   \n",
       "3862           0           0           0           0         1   \n",
       "3863           0           0           1           0         0   \n",
       "3864           0           0           1           0         0   \n",
       "3865           0           0           1           0         0   \n",
       "3866           0           0           0           0         1   \n",
       "\n",
       "      Engine Type_Gas  Engine Type_Other  Engine Type_Petrol  Registration_yes  \n",
       "0                   0                  0                   1                 1  \n",
       "1                   0                  0                   0                 1  \n",
       "2                   1                  0                   0                 1  \n",
       "3                   0                  0                   1                 1  \n",
       "4                   0                  0                   1                 1  \n",
       "...               ...                ...                 ...               ...  \n",
       "3862                0                  0                   0                 1  \n",
       "3863                0                  0                   1                 1  \n",
       "3864                0                  0                   0                 1  \n",
       "3865                0                  0                   1                 1  \n",
       "3866                0                  0                   0                 1  \n",
       "\n",
       "[3867 rows x 18 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_dummies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14da2794-9dab-4676-86e7-a597b8b2898c",
   "metadata": {},
   "source": [
    "### Check the VIF of the features including the dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5e960d80-6626-4140-8e03-4b1744e67de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_with_dummies_branch = data_with_dummies.copy()\n",
    "data_with_dummies_branch = data_with_dummies_branch.drop(\"log_price\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6658f228-b372-49cc-b16a-77544f72401e",
   "metadata": {},
   "outputs": [],
   "source": [
    "VIF = pd.DataFrame()\n",
    "\n",
    "variables = data_with_dummies_branch\n",
    "\n",
    "VIF[\"VIF\"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\n",
    "VIF[\"features\"] = variables.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dda4cbd3-af5d-4f63-b955-568ab6dd84f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.459662</td>\n",
       "      <td>Mileage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.841729</td>\n",
       "      <td>EngineV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.294007</td>\n",
       "      <td>Brand_BMW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.868649</td>\n",
       "      <td>Brand_Mercedes-Benz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.641712</td>\n",
       "      <td>Brand_Mitsubishi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.086774</td>\n",
       "      <td>Brand_Renault</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.162166</td>\n",
       "      <td>Brand_Toyota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.844515</td>\n",
       "      <td>Brand_Volkswagen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.464260</td>\n",
       "      <td>Body_hatch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1.534059</td>\n",
       "      <td>Body_other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.120431</td>\n",
       "      <td>Body_sedan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.581933</td>\n",
       "      <td>Body_vagon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2.470096</td>\n",
       "      <td>Body_van</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1.689146</td>\n",
       "      <td>Engine Type_Gas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.082037</td>\n",
       "      <td>Engine Type_Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2.498172</td>\n",
       "      <td>Engine Type_Petrol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>9.641446</td>\n",
       "      <td>Registration_yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VIF             features\n",
       "0   4.459662              Mileage\n",
       "1   7.841729              EngineV\n",
       "2   2.294007            Brand_BMW\n",
       "3   2.868649  Brand_Mercedes-Benz\n",
       "4   1.641712     Brand_Mitsubishi\n",
       "5   2.086774        Brand_Renault\n",
       "6   2.162166         Brand_Toyota\n",
       "7   2.844515     Brand_Volkswagen\n",
       "8   1.464260           Body_hatch\n",
       "9   1.534059           Body_other\n",
       "10  3.120431           Body_sedan\n",
       "11  1.581933           Body_vagon\n",
       "12  2.470096             Body_van\n",
       "13  1.689146      Engine Type_Gas\n",
       "14  1.082037    Engine Type_Other\n",
       "15  2.498172   Engine Type_Petrol\n",
       "16  9.641446     Registration_yes"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "VIF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c72dbca3-34c1-4c63-a0cf-ab5d1d96f61c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.841729</td>\n",
       "      <td>EngineV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>9.641446</td>\n",
       "      <td>Registration_yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VIF          features\n",
       "1   7.841729           EngineV\n",
       "16  9.641446  Registration_yes"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "VIF[VIF['VIF'] > 5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9512dabb-bd26-4209-9a8a-864301263b39",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "- We can drop the ```Registration_yes``` columns to optimize the model "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6b27126-fb05-48af-bdd0-d17e6c2eaae9",
   "metadata": {},
   "source": [
    "### Rearrange a bit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0fc00410-c624-4c79-99db-79b6d497e699",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Mileage', 'EngineV', 'log_price', 'Brand_BMW', 'Brand_Mercedes-Benz',\n",
       "       'Brand_Mitsubishi', 'Brand_Renault', 'Brand_Toyota', 'Brand_Volkswagen',\n",
       "       'Body_hatch', 'Body_other', 'Body_sedan', 'Body_vagon', 'Body_van',\n",
       "       'Engine Type_Gas', 'Engine Type_Other', 'Engine Type_Petrol',\n",
       "       'Registration_yes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_dummies.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5549882e-73db-44f9-8027-4079c8b5ca66",
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = ['log_price', 'Mileage', 'EngineV', 'Brand_BMW', 'Brand_Mercedes-Benz',\n",
    "       'Brand_Mitsubishi', 'Brand_Renault', 'Brand_Toyota', 'Brand_Volkswagen',\n",
    "       'Body_hatch', 'Body_other', 'Body_sedan', 'Body_vagon', 'Body_van',\n",
    "       'Engine Type_Gas', 'Engine Type_Other', 'Engine Type_Petrol',\n",
    "       'Registration_yes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "022cf6b3-d994-4f35-992c-5108d8d5dc72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>log_price</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>EngineV</th>\n",
       "      <th>Brand_BMW</th>\n",
       "      <th>Brand_Mercedes-Benz</th>\n",
       "      <th>Brand_Mitsubishi</th>\n",
       "      <th>Brand_Renault</th>\n",
       "      <th>Brand_Toyota</th>\n",
       "      <th>Brand_Volkswagen</th>\n",
       "      <th>Body_hatch</th>\n",
       "      <th>Body_other</th>\n",
       "      <th>Body_sedan</th>\n",
       "      <th>Body_vagon</th>\n",
       "      <th>Body_van</th>\n",
       "      <th>Engine Type_Gas</th>\n",
       "      <th>Engine Type_Other</th>\n",
       "      <th>Engine Type_Petrol</th>\n",
       "      <th>Registration_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.342840</td>\n",
       "      <td>277</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.974618</td>\n",
       "      <td>427</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.495519</td>\n",
       "      <td>358</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.043249</td>\n",
       "      <td>240</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.814656</td>\n",
       "      <td>120</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3862</th>\n",
       "      <td>9.350102</td>\n",
       "      <td>163</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3863</th>\n",
       "      <td>9.792556</td>\n",
       "      <td>35</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3864</th>\n",
       "      <td>11.736069</td>\n",
       "      <td>9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3865</th>\n",
       "      <td>8.779557</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3866</th>\n",
       "      <td>9.510445</td>\n",
       "      <td>124</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3867 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      log_price  Mileage  EngineV  Brand_BMW  Brand_Mercedes-Benz  \\\n",
       "0      8.342840      277      2.0          1                    0   \n",
       "1      8.974618      427      2.9          0                    1   \n",
       "2      9.495519      358      5.0          0                    1   \n",
       "3     10.043249      240      4.2          0                    0   \n",
       "4      9.814656      120      2.0          0                    0   \n",
       "...         ...      ...      ...        ...                  ...   \n",
       "3862   9.350102      163      2.5          0                    0   \n",
       "3863   9.792556       35      1.6          0                    0   \n",
       "3864  11.736069        9      3.0          0                    1   \n",
       "3865   8.779557        1      3.5          1                    0   \n",
       "3866   9.510445      124      2.0          0                    0   \n",
       "\n",
       "      Brand_Mitsubishi  Brand_Renault  Brand_Toyota  Brand_Volkswagen  \\\n",
       "0                    0              0             0                 0   \n",
       "1                    0              0             0                 0   \n",
       "2                    0              0             0                 0   \n",
       "3                    0              0             0                 0   \n",
       "4                    0              0             1                 0   \n",
       "...                ...            ...           ...               ...   \n",
       "3862                 0              0             0                 1   \n",
       "3863                 0              0             1                 0   \n",
       "3864                 0              0             0                 0   \n",
       "3865                 0              0             0                 0   \n",
       "3866                 0              0             0                 1   \n",
       "\n",
       "      Body_hatch  Body_other  Body_sedan  Body_vagon  Body_van  \\\n",
       "0              0           0           1           0         0   \n",
       "1              0           0           0           0         1   \n",
       "2              0           0           1           0         0   \n",
       "3              0           0           0           0         0   \n",
       "4              0           0           0           0         0   \n",
       "...          ...         ...         ...         ...       ...   \n",
       "3862           0           0           0           0         1   \n",
       "3863           0           0           1           0         0   \n",
       "3864           0           0           1           0         0   \n",
       "3865           0           0           1           0         0   \n",
       "3866           0           0           0           0         1   \n",
       "\n",
       "      Engine Type_Gas  Engine Type_Other  Engine Type_Petrol  Registration_yes  \n",
       "0                   0                  0                   1                 1  \n",
       "1                   0                  0                   0                 1  \n",
       "2                   1                  0                   0                 1  \n",
       "3                   0                  0                   1                 1  \n",
       "4                   0                  0                   1                 1  \n",
       "...               ...                ...                 ...               ...  \n",
       "3862                0                  0                   0                 1  \n",
       "3863                0                  0                   1                 1  \n",
       "3864                0                  0                   0                 1  \n",
       "3865                0                  0                   1                 1  \n",
       "3866                0                  0                   0                 1  \n",
       "\n",
       "[3867 rows x 18 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_preprocessed = data_with_dummies[cols]\n",
    "data_preprocessed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c59ab5f-2ce6-4323-be48-571f0e462b11",
   "metadata": {},
   "source": [
    "## Linear Regression Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c9490e1-2d1b-4fa4-a23a-5ec12624a76c",
   "metadata": {},
   "source": [
    "### Declare the inputs and the targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "de0f5bd9-dc66-4ac2-afaa-dd8341637938",
   "metadata": {},
   "outputs": [],
   "source": [
    "targets = data_preprocessed['log_price']\n",
    "inputs = data_preprocessed.drop(['log_price'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f72a2a1-5d68-4375-9d15-978dbabc703c",
   "metadata": {},
   "source": [
    "### Scale input variables - Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "074e5200-8881-45d4-9b1c-06204eb3b05f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler()"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "851a08db-957d-4793-8187-36bbbc36143a",
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_scaled = scaler.transform(inputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11092de3-004e-4382-87ca-37f1b7139a30",
   "metadata": {},
   "source": [
    "##### Some Notes: \n",
    "- It is not usually recommended to standardize dummy variables \n",
    ">Scaling has no effect on the predictive power of dummies. Ince scaled, though, they lose all their dummy meaning."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7319c14b-d565-4c96-b730-9e0e0614b9d4",
   "metadata": {},
   "source": [
    "### Train Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "611ba502-3acc-4323-aa90-eed664bd8551",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(inputs_scaled, targets, test_size=0.2, random_state=365)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "703b8c64-3d43-43e8-afcd-4e84f9206d39",
   "metadata": {},
   "source": [
    "### Create the regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3029d2ac-c0f4-4f2e-9150-65516bf2ccfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = LinearRegression()\n",
    "reg.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffc7d30c-7ddd-45a6-a8f7-d5e5dcfbdb58",
   "metadata": {},
   "source": [
    "##### Some Notes: \n",
    "- In fact, this is a ***log-linear regression*** as the dependent variables is the log of ```Price```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "35a67f94-ebb2-4b57-a31c-ff34f3372abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_hat = reg.predict(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12e3aa4f-439e-42d5-b99e-db4a26e4d090",
   "metadata": {},
   "source": [
    "### Check performance visually  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1c0fdca4-d95e-490b-b11c-f310db5cfe23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.0, 13.0)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0,13)\n",
    "y = x\n",
    "plt.plot(x,y, c=\"orange\", lw=3)\n",
    "\n",
    "plt.scatter(y_train, y_hat)\n",
    "plt.xlabel(\"Targets (y_train)\", fontsize=18)\n",
    "plt.ylabel(\"Predictions (y_hat)\", fontsize=18)\n",
    "plt.xlim(6,13)\n",
    "plt.ylim(6,13)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99dd648b-b143-4286-b551-6dd3fc649019",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "- The more close the datapoint (```Targets``` & ```predictions```) to the 45-degree line, the better the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "6d1130cf-1475-46bd-b1cc-4d3e0d14e845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Residuals PDF')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(y_train-y_hat)\n",
    "plt.title(\"Residuals PDF\", size=18)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf4dc93-30ca-4b07-a532-585b7fd28100",
   "metadata": {},
   "source": [
    "##### Some Notes: \n",
    "- When $Residuals$ ~ $N(0, var^2)$ --> Better the performance **(Normality and Homoscedasticity assumption)**\n",
    "- There are quite **a much longer tails on the left side*** ---> There are certain observations for which ```y_train``` - ```y_hat``` is much lower than the mean (a much higher price is predicted than is observed) \n",
    "\n",
    "---> ```Predictions``` tend to **overestimate the ```targets```** and **rarely underestimate the ```targets```**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef86517-5288-4c6d-926d-79514dff96dc",
   "metadata": {},
   "source": [
    "### R-Squared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d3b65c66-510d-4c26-83cc-ea3ffc89e74b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.744996578792662"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4c85ed1-6e90-4c8f-8ab7-90c518a0c62d",
   "metadata": {},
   "source": [
    "### Finding the weights and bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f0969a11-d76f-49a8-8c1e-77ac587993e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.415239458021299"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "59622a81-bc1a-4e61-8993-5b70e4c6de3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.44871341,  0.20903483,  0.0142496 ,  0.01288174, -0.14055166,\n",
       "       -0.17990912, -0.06054988, -0.08992433, -0.1454692 , -0.10144383,\n",
       "       -0.20062984, -0.12988747, -0.16859669, -0.12149035, -0.03336798,\n",
       "       -0.14690868,  0.32047333])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c4baeda2-7e1c-44d0-8e98-794d9d4b8494",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>weights</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mileage</td>\n",
       "      <td>-0.448713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>EngineV</td>\n",
       "      <td>0.209035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brand_BMW</td>\n",
       "      <td>0.014250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brand_Mercedes-Benz</td>\n",
       "      <td>0.012882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brand_Mitsubishi</td>\n",
       "      <td>-0.140552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Brand_Renault</td>\n",
       "      <td>-0.179909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Brand_Toyota</td>\n",
       "      <td>-0.060550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Brand_Volkswagen</td>\n",
       "      <td>-0.089924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Body_hatch</td>\n",
       "      <td>-0.145469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Body_other</td>\n",
       "      <td>-0.101444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Body_sedan</td>\n",
       "      <td>-0.200630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Body_vagon</td>\n",
       "      <td>-0.129887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Body_van</td>\n",
       "      <td>-0.168597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Engine Type_Gas</td>\n",
       "      <td>-0.121490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Engine Type_Other</td>\n",
       "      <td>-0.033368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Engine Type_Petrol</td>\n",
       "      <td>-0.146909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Registration_yes</td>\n",
       "      <td>0.320473</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Features   weights\n",
       "0               Mileage -0.448713\n",
       "1               EngineV  0.209035\n",
       "2             Brand_BMW  0.014250\n",
       "3   Brand_Mercedes-Benz  0.012882\n",
       "4      Brand_Mitsubishi -0.140552\n",
       "5         Brand_Renault -0.179909\n",
       "6          Brand_Toyota -0.060550\n",
       "7      Brand_Volkswagen -0.089924\n",
       "8            Body_hatch -0.145469\n",
       "9            Body_other -0.101444\n",
       "10           Body_sedan -0.200630\n",
       "11           Body_vagon -0.129887\n",
       "12             Body_van -0.168597\n",
       "13      Engine Type_Gas -0.121490\n",
       "14    Engine Type_Other -0.033368\n",
       "15   Engine Type_Petrol -0.146909\n",
       "16     Registration_yes  0.320473"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_summary = pd.DataFrame(columns = [\"Features\"], data=inputs.columns)\n",
    "reg_summary[\"weights\"] = reg.coef_\n",
    "reg_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "361ac7e5-4ad9-49f8-82cb-373f6786b0ba",
   "metadata": {},
   "source": [
    "### Testing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "28dfcf1d-3bad-4f68-aaee-36afa84042a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_hat_test = reg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "97273a64-1f75-44db-a11b-0153b4254774",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.0, 13.0)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y,c=\"orange\",lw=3)\n",
    "\n",
    "plt.scatter(y_test, y_hat_test, alpha=0.2)\n",
    "plt.xlabel(\"Targets (y_test)\", fontsize=18)\n",
    "plt.ylabel(\"Predictions (y_hat_test)\", fontsize=18)\n",
    "plt.xlim(6,13)\n",
    "plt.ylim(6,13)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b3a5105-a75d-4ad8-a69f-89c22d6bd324",
   "metadata": {},
   "source": [
    "##### Some Notes:\n",
    "- For higher prices, we have a high concentration of values around the 45-degree line ---> Our model is very good at predicting higher prices\n",
    "- For the lower ones, it looks not so amazing, much more scatterd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f0f8fbbe-eb57-420b-a8f5-f2c9da07842b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Residual PDF - Test')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYcAAAEdCAYAAADn46tbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAABAcklEQVR4nO3dd3xUVd748c/0ZNLLpAKB0EvoSFkXHhtIV2TFFUEfBXVXZVd/YgHbqiw+iItt3RXUdd0FH9FViqsUdWV9hJUiUkKoISG9TeokmUy5vz9iImGSkDKTmSTf9+vFi8w9t3znTjLfe8859xyVoigKQgghxEXU3g5ACCGE75HkIIQQwoUkByGEEC4kOQghhHAhyUEIIYQLSQ5CCCFcaL0dgPBNjz32GJ988onLcoPBQEREBBMnTuShhx4iMjLSI8dftGgRWVlZfPXVV25Zz5NxvPbaa7z++usNlqlUKvz8/EhISODGG29k8eLFqNXqJtfX6XSEhoYycuRI7rzzTkaPHt2g/OOPP+bxxx9vNtY//vGPXHvtta15ey4WLVrE/v37L7ve/fffzwMPPNCuY12sqKgIf39/jEaj2/Yp2keSg2jW448/TlhYWP3riooK9u3bxz/+8Q+OHz/ORx99hF6vd/tx7733Xqqqqty+X0+69957SUxMBEBRFKqqqvjyyy9ZvXo1GRkZPPnkk02ub7Vayc7OZsuWLSxcuJA1a9Ywe/Zsl2MsWLCAMWPGNHr8YcOGueU9zJ8/v/717t272b17d4NYAQYOHNjuY9XZs2cPDz/8MJ988okkBx8iyUE069prr6VHjx4Nli1cuJBnnnmG999/ny+++IIZM2a4/bg/+9nP3L5PT5s0aRLjx49vsGzBggX88pe/ZNOmTdx9991ER0c3u/6dd97JLbfcwsqVKxkzZgxxcXENykeOHMncuXM99h4uPe8XLlxg9+7djcbqLkePHqWsrMwj+xZtJ20Ook1uvPFGAI4cOeLlSHybWq3m+uuvx+l0tuhcBQcH8+yzz2K1WvnrX//aAREK0ThJDqJN/P39gdrqk4v961//4pZbbmHEiBGMGzeOBx54gPPnzzdYJzs7mwceeIArr7ySpKQkZsyYwYYNG3A6nfXrLFq0iKuvvrrBdnv37uWWW25h5MiRXHvttXz22WcucTW2XVPLd+zYwW233caYMWMYNmwYV199NWvWrKGmpqZ1J+MyVCoVAHa7vUXrjx07lri4OL755hu3xuFu7visH3vssfr2l2uuuYZFixZ1+PsQjZNqJdEmdV9cQ4YMqV/28ccfs2LFCiZOnMjy5cspLS3l/fff5+abb2bz5s306dMHm83GkiVLqK6u5o477iA4OJg9e/awdu1aHA4H9957b6PH27t3L0uXLqV379789re/xWw2s3LlSlQqFaGhoa2O/8MPP+SJJ57g6quv5uGHH8Zms7F7927efvttjEYj999/f5vOS2P+85//ADB06NAWb9O/f3/27NlDTU1NgzadyspKzGazy/qBgYEeaftpirs+6wULFlBRUcHu3bt5/PHH6d+/f4e9B9E8SQ6iWWVlZQ2+jCoqKvjmm294/fXX6du3LzNnzqxfvmrVKmbMmMEf/vCH+vVvvvlmZs6cydq1a/njH/9ISkoK586d45VXXuH6668H4Be/+AVLlixxueq82Nq1azGZTHzwwQcEBgYCtXX2t99+e5uSwzvvvMOoUaN444036q/sb731Vq655hp27tzZpuRQXl5ef64URSEnJ4dPPvmEf/3rX1x33XUkJCS0eF/BwcEAlJaWYjKZ6pc/99xzPPfccy7rr169mnnz5rU65rZw52c9atQoBg4cyO7duxtt3xLeI8lBNKuubeFi/v7+XH311Tz55JPodDoAvv32WyoqKrj22msbJBONRsOECRPYs2cPdrudqKgoVCoVb775JgEBAYwfPx69Xs/bb7/dZAxFRUUkJyezZMmS+sQAMGHCBAYOHEhFRUWr39e2bduoqqqqTwx1xwkODqaysrLV+wO47777XJZpNBpmzZrF7373u1btq64K6uL4AO666y6uvPJKl/X79evXqv23hyc/a+E7JDmIZr344otERkZis9n45ptv2LhxI9OnT+eZZ57BYDDUr3fhwgUAHnzwwSb3ZTabiYmJYfny5fzhD39gyZIlGI1GJk6cyIwZM5g+fToajcZlu6ysLAB69erlUpaYmMjRo0db/b50Oh0HDhzg008/JTU1lQsXLlBUVARAfHx8q/cH8OijjzJo0CCg9ks9ICCAvn37EhAQ0Op9lZSUoNFo6u8g6vTr149Jkya1al81NTWUlpY2WObn50dQUFCr4wLPftbCd0hyEM0aPXp0/a3+lClTSEhI4Pnnn6ekpKRBlUxdA+Nz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eetcvf7668ycOZOZM2eyZs0al/I2nS9FuLjqqquUlJQURVEU5cMPP1Tuvfdel3Xeeust5cknn1QURVH279+v/OIXv/B4XGVlZcrjjz+uDB8+XHn11VcbXWfHjh31cXWUlsTljfN19913K59++qmiKIry+uuvK2vWrHFZp6POV25urnLVVVcpxcXFisViUWbPnq2cOXOmwTozZ85UDh8+rCiKojz++OPKxo0bfSKue+65R/n+++89HsvFfvjhB2XWrFnK0KFDlYyMDJdyb5yrlsTljXP17bffKgsWLFCsVqtSU1OjLF68WNm1a1eDddpyvuTO4RI1NTX85je/YdCgQQAMHDiQnJwcl/W+/vpr5syZA8C4ceMwm81kZ2d7NLYvv/yS3r1789///d9NrnPs2DFOnz7N3LlzWbx4MadOnfJoTC2Nq6PPl81m48CBA0ybNg2oHdhxx44dLut11Pm6eCBKo9FYPxBlncYGomws3o6OC+D48eO8+eabzJ49m2effRartfHBHt1p8+bNPP30042OmuCtc3W5uMA758pkMvHYY4+h1+vR6XT07du3wd9WW8+XJIdL6PV65s6dC9SO//T6669z7bXXuqyXn5+PyfTTmPMmk4nc3FyPxnbDDTdw9913o9FomlzHYDAwZ84cPvnkE+666y7uu+8+ampqvB5XR5+v4uJiAgMD6+cHMZlM5OW5Dp/eUefr0vcfFRXVIJ7Gzk9j8XZ0XBaLhcGDB7N8+XI++eQTysrKeOONNzwe16pVqxg7dmyLYu6oc3W5uLx1rvr371//xZ+Wlsbnn3/OlClT6svber4618w6bvb555+zevXqBssSExN59913qamp4bHHHsNut3PPPfe4bKtcMlCgoiioG5l0x91xXc4DDzxQ//OUKVN46aWXSE1Nrb8T8lZcHX2+EhISXAZybGxgR0+er4v56kCUlztuQEAAGzZsqH995513smLFivrRlr3BVwft9Pa5OnPmDPfccw+PPPIIvXv3rl/e1vPVrZPD9OnTmT59ustyi8XCr371K0JDQ/nTn/6ETuc6Nnx0dDT5+fn06tULcO/AgU3F1RJ/+9vfmDVrFmFhYUDtL4K7ZtdrT1wdfb5sNhvjx4/H4XCg0WhcBn6s48nzdbGYmBgOHjxY/9pXBqK8XFzZ2dns3buX+fPnA547P63hq4N2evNcHTp0iGXLlrFixQpmzpzZoKyt50uqlRqxfPlyEhISePnll5sc62nKlCls3boVgIMHD2IwGIiLi+vIMBt14MABPvroIwD279+P0+kkMTHRy1F1/PnS6XSMHTuWzz77DIAtW7Y0OrBjR50vXx2I8nJx+fn58eKLL5KRkYGiKGzcuJHrrrvO43E1x1cH7fTWucrJyeG+++5j7dq1LokB2nG+3NJc3oUkJycrAwYMUGbMmKHMmTNHmTNnjrJkyRJFURRl06ZNyssvv6woiqJUV1crjzzyiDJjxgzlhhtuUI4fP95hMb766qsNegVdHFdubq5yxx13KDNnzlTmzZtX3+vK23F543xlZmYqt912mzJ9+nTlzjvvVEpKSlzi6sjztW3bNmXmzJnK1KlTlfXr1yuKoihLlixRjh49qiiKoqSkpCg33XSTMm3aNOWhhx5SrFarx2JpTVw7duyoL3/sscc6LC5Fqe05WNcryBfO1eXi8sa5eu6555SRI0fWf1/NmTNH2bRpU7vPlwy8J4QQwoVUKwkhhHAhyUEIIYQLSQ5CCCFcSHIQQgjhQpKDEEIIF5IcRLf03XffMWvWLK8dPy8vj1tuucVrxxficiQ5COEF0dHR/O///q+3wxCiSd16+AwhysvL+d3vfsfJkydRqVT8/Oc/56GHHkKr1bJnzx7Wrl2LWq1m8ODB7N27l02bNtGjR48m97do0SKGDBnCoUOHKC4uZu7cuSxbtozMzEwWLlxI3759ycrK4oUXXuDOO+/k8OHD2O12XnzxRb7++ms0Gg2jRo3i6aefRq/X86c//Yldu3bhdDqJj4/n6aefJjo6ugPPkOiu5M5BdGvPP/88oaGhbN++nX/84x+cOnWKd955h+LiYh555BFefPFFtm7dyvjx41s88uf58+d5//33+eSTT/jss8/417/+BUBubi6//vWv2blzZ4NRMjdt2kRycjJbt27l008/xWKx8Nlnn7FlyxZOnz7Nhx9+yNatW5kyZQpPPPGER86DEJeSOwfRrf373//m/fffR6VSodfrueWWW/jrX/9Knz596Nu3b/3orDfeeCPPP/98i/a5YMECdDodOp2O66+/nv/7v/+jf//+aLXa+qGVL7Z3717mzp2Ln58fUDujHsBvfvMbjh07xk033QTUjq5ZVVXV/jctRAtIchDd2qXDGTudTux2OxqNhktHlmnpEOMXj8SpXDQ0uV6vb3SUzkuXFRYW4nQ6cTqdLFmyhFtvvRWonYiqtLS0ZW9MiHaSaiXRrV155ZX8/e9/R1EUampq2Lx5M5MmTWL06NGkpaVx8uRJAHbu3ElZWVmLxsHftm0bTqeT0tJSPv/8c66++upm1584cSKffvopNTU1OJ1OnnnmGf75z39y5ZVX8tFHH1FRUQHAK6+8wiOPPNL+Ny1EC8idg+jWnnjiCZ5//nlmz56NzWbj5z//Offeey96vZ4//OEPPProo6jVaoYNG4ZWq8Xf3/+y+6yurmb+/PlYLBZuvfVWJk6c2Ohk9HVuueUWsrKymDdvHoqicMUVV7Bo0SLUajV5eXncfPPNqFQqYmNjeeGFF9z59oVokozKKkQjKioqeOONN3jggQfw9/cnOTmZe+65h2+++abZu4dFixaxcOFCrr/++g6MVgj3kzsHIRoRGBiITqdj/vz5aLVatFotL7/8Mt99953LlKR1xo8f38FRCuE5cucghBDChTRICyGEcCHJQQghhAtJDkIIIVxIchBCCOFCkoMQQggXkhyEEEK4+P9bxu/ucycUCgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(y_test - y_hat_test)\n",
    "plt.title(\"Residual PDF - Test\", fontsize=18) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4d9d1f4-3c1b-45b8-a5af-b65104207bb2",
   "metadata": {},
   "source": [
    "### R-Squared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d834b356-0f9f-46b1-8a27-7606d2ef8c51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7726984972665858"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2ebbbe6d-ed96-46c4-bb54-d5db2ca9a36e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10685.501696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3499.255242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7553.285218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7463.963017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11353.490075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prediction\n",
       "0  10685.501696\n",
       "1   3499.255242\n",
       "2   7553.285218\n",
       "3   7463.963017\n",
       "4  11353.490075"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf = pd.DataFrame(np.exp(y_hat_test), columns=[\"Prediction\"])\n",
    "df_pf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d27f6807-cb88-4299-84cf-94a04cd936be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10685.501696</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3499.255242</td>\n",
       "      <td>7900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7553.285218</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7463.963017</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11353.490075</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prediction  Target\n",
       "0  10685.501696     NaN\n",
       "1   3499.255242  7900.0\n",
       "2   7553.285218     NaN\n",
       "3   7463.963017     NaN\n",
       "4  11353.490075     NaN"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf[\"Target\"] = np.exp(y_test)\n",
    "df_pf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2bd96cab-fc0a-4d2e-bdab-8efb1e86e3e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       7.740664\n",
       "1       7.937375\n",
       "2       7.824046\n",
       "3       8.764053\n",
       "4       9.121509\n",
       "         ...    \n",
       "769    10.292146\n",
       "770     9.169518\n",
       "771     9.814656\n",
       "772    11.134589\n",
       "773     9.287301\n",
       "Name: log_price, Length: 774, dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test = y_test.reset_index(drop=True)\n",
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ea98e542-700d-4e66-a804-2a6169c3be2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10685.501696</td>\n",
       "      <td>2300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3499.255242</td>\n",
       "      <td>2800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7553.285218</td>\n",
       "      <td>2500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7463.963017</td>\n",
       "      <td>6400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11353.490075</td>\n",
       "      <td>9150.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prediction  Target\n",
       "0  10685.501696  2300.0\n",
       "1   3499.255242  2800.0\n",
       "2   7553.285218  2500.0\n",
       "3   7463.963017  6400.0\n",
       "4  11353.490075  9150.0"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf[\"Target\"] = np.exp(y_test)\n",
    "df_pf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "489e93f5-645e-4e46-adc2-96aae98f93ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "      <th>Residual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10685.501696</td>\n",
       "      <td>2300.0</td>\n",
       "      <td>-8385.501696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3499.255242</td>\n",
       "      <td>2800.0</td>\n",
       "      <td>-699.255242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7553.285218</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>-5053.285218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7463.963017</td>\n",
       "      <td>6400.0</td>\n",
       "      <td>-1063.963017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11353.490075</td>\n",
       "      <td>9150.0</td>\n",
       "      <td>-2203.490075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>769</th>\n",
       "      <td>29651.726363</td>\n",
       "      <td>29500.0</td>\n",
       "      <td>-151.726363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>770</th>\n",
       "      <td>10732.071179</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>-1132.071179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>13922.446953</td>\n",
       "      <td>18300.0</td>\n",
       "      <td>4377.553047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>27487.751303</td>\n",
       "      <td>68500.0</td>\n",
       "      <td>41012.248697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>13491.163043</td>\n",
       "      <td>10800.0</td>\n",
       "      <td>-2691.163043</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>774 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Prediction   Target      Residual\n",
       "0    10685.501696   2300.0  -8385.501696\n",
       "1     3499.255242   2800.0   -699.255242\n",
       "2     7553.285218   2500.0  -5053.285218\n",
       "3     7463.963017   6400.0  -1063.963017\n",
       "4    11353.490075   9150.0  -2203.490075\n",
       "..            ...      ...           ...\n",
       "769  29651.726363  29500.0   -151.726363\n",
       "770  10732.071179   9600.0  -1132.071179\n",
       "771  13922.446953  18300.0   4377.553047\n",
       "772  27487.751303  68500.0  41012.248697\n",
       "773  13491.163043  10800.0  -2691.163043\n",
       "\n",
       "[774 rows x 3 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf[\"Residual\"] = df_pf[\"Target\"] - df_pf[\"Prediction\"]\n",
    "df_pf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "80373156-b7d5-4eef-ba4d-224cbb90eb27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "      <th>Residual</th>\n",
       "      <th>Difference%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10685.501696</td>\n",
       "      <td>2300.0</td>\n",
       "      <td>-8385.501696</td>\n",
       "      <td>364.587030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3499.255242</td>\n",
       "      <td>2800.0</td>\n",
       "      <td>-699.255242</td>\n",
       "      <td>24.973402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7553.285218</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>-5053.285218</td>\n",
       "      <td>202.131409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7463.963017</td>\n",
       "      <td>6400.0</td>\n",
       "      <td>-1063.963017</td>\n",
       "      <td>16.624422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11353.490075</td>\n",
       "      <td>9150.0</td>\n",
       "      <td>-2203.490075</td>\n",
       "      <td>24.081859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>769</th>\n",
       "      <td>29651.726363</td>\n",
       "      <td>29500.0</td>\n",
       "      <td>-151.726363</td>\n",
       "      <td>0.514327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>770</th>\n",
       "      <td>10732.071179</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>-1132.071179</td>\n",
       "      <td>11.792408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>13922.446953</td>\n",
       "      <td>18300.0</td>\n",
       "      <td>4377.553047</td>\n",
       "      <td>23.921055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>27487.751303</td>\n",
       "      <td>68500.0</td>\n",
       "      <td>41012.248697</td>\n",
       "      <td>59.871896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>13491.163043</td>\n",
       "      <td>10800.0</td>\n",
       "      <td>-2691.163043</td>\n",
       "      <td>24.918176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>774 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Prediction   Target      Residual  Difference%\n",
       "0    10685.501696   2300.0  -8385.501696   364.587030\n",
       "1     3499.255242   2800.0   -699.255242    24.973402\n",
       "2     7553.285218   2500.0  -5053.285218   202.131409\n",
       "3     7463.963017   6400.0  -1063.963017    16.624422\n",
       "4    11353.490075   9150.0  -2203.490075    24.081859\n",
       "..            ...      ...           ...          ...\n",
       "769  29651.726363  29500.0   -151.726363     0.514327\n",
       "770  10732.071179   9600.0  -1132.071179    11.792408\n",
       "771  13922.446953  18300.0   4377.553047    23.921055\n",
       "772  27487.751303  68500.0  41012.248697    59.871896\n",
       "773  13491.163043  10800.0  -2691.163043    24.918176\n",
       "\n",
       "[774 rows x 4 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf[\"Difference%\"] = np.absolute(df_pf[\"Residual\"]/df_pf[\"Target\"]*100)\n",
    "df_pf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "8bacb3be-9149-40ad-91ef-a4280e01e033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "      <th>Residual</th>\n",
       "      <th>Difference%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>774.000000</td>\n",
       "      <td>774.000000</td>\n",
       "      <td>774.000000</td>\n",
       "      <td>774.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>15946.760167</td>\n",
       "      <td>18165.817106</td>\n",
       "      <td>2219.056939</td>\n",
       "      <td>36.256693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13133.197604</td>\n",
       "      <td>19967.858908</td>\n",
       "      <td>10871.218143</td>\n",
       "      <td>55.066507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1320.562768</td>\n",
       "      <td>1200.000000</td>\n",
       "      <td>-29456.498331</td>\n",
       "      <td>0.062794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7413.644234</td>\n",
       "      <td>6900.000000</td>\n",
       "      <td>-2044.191251</td>\n",
       "      <td>12.108022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>11568.168859</td>\n",
       "      <td>11600.000000</td>\n",
       "      <td>142.518577</td>\n",
       "      <td>23.467728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>20162.408805</td>\n",
       "      <td>20500.000000</td>\n",
       "      <td>3147.343497</td>\n",
       "      <td>39.563570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77403.055224</td>\n",
       "      <td>126000.000000</td>\n",
       "      <td>85106.162329</td>\n",
       "      <td>512.688080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Prediction         Target      Residual  Difference%\n",
       "count    774.000000     774.000000    774.000000   774.000000\n",
       "mean   15946.760167   18165.817106   2219.056939    36.256693\n",
       "std    13133.197604   19967.858908  10871.218143    55.066507\n",
       "min     1320.562768    1200.000000 -29456.498331     0.062794\n",
       "25%     7413.644234    6900.000000  -2044.191251    12.108022\n",
       "50%    11568.168859   11600.000000    142.518577    23.467728\n",
       "75%    20162.408805   20500.000000   3147.343497    39.563570\n",
       "max    77403.055224  126000.000000  85106.162329   512.688080"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pf.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeefd33f-8e20-4cff-bf05-d37e01a8992c",
   "metadata": {
    "tags": []
   },
   "source": [
    "##### Some Notes: \n",
    "- The min difference in percentage is 0.06%\n",
    "- The max difference in percentage is pretty off mark\n",
    "- For the most of our predictions, we got relatively close (based on percentiles)\n",
    "\n",
    "**---> The lower the difference% we got, the better**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5b19e22a-6a52-4b38-bad5-1573579c04c4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prediction</th>\n",
       "      <th>Target</th>\n",
       "      <th>Residual</th>\n",
       "      <th>Difference%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>30480.85</td>\n",
       "      <td>30500.00</td>\n",
       "      <td>19.15</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>16960.31</td>\n",
       "      <td>16999.00</td>\n",
       "      <td>38.69</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>12469.21</td>\n",
       "      <td>12500.00</td>\n",
       "      <td>30.79</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>25614.14</td>\n",
       "      <td>25500.00</td>\n",
       "      <td>-114.14</td>\n",
       "      <td>0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>42703.68</td>\n",
       "      <td>42500.00</td>\n",
       "      <td>-203.68</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>657</th>\n",
       "      <td>32481.05</td>\n",
       "      <td>6000.00</td>\n",
       "      <td>-26481.05</td>\n",
       "      <td>441.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>9954.42</td>\n",
       "      <td>1800.00</td>\n",
       "      <td>-8154.42</td>\n",
       "      <td>453.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>35956.50</td>\n",
       "      <td>6500.00</td>\n",
       "      <td>-29456.50</td>\n",
       "      <td>453.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>532</th>\n",
       "      <td>10019.90</td>\n",
       "      <td>1800.00</td>\n",
       "      <td>-8219.90</td>\n",
       "      <td>456.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>639</th>\n",
       "      <td>30628.28</td>\n",
       "      <td>4999.00</td>\n",
       "      <td>-25629.28</td>\n",
       "      <td>512.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>774 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Prediction   Target  Residual  Difference%\n",
       "698    30480.85 30500.00     19.15         0.06\n",
       "742    16960.31 16999.00     38.69         0.23\n",
       "60     12469.21 12500.00     30.79         0.25\n",
       "110    25614.14 25500.00   -114.14         0.45\n",
       "367    42703.68 42500.00   -203.68         0.48\n",
       "..          ...      ...       ...          ...\n",
       "657    32481.05  6000.00 -26481.05       441.35\n",
       "162     9954.42  1800.00  -8154.42       453.02\n",
       "451    35956.50  6500.00 -29456.50       453.18\n",
       "532    10019.90  1800.00  -8219.90       456.66\n",
       "639    30628.28  4999.00 -25629.28       512.69\n",
       "\n",
       "[774 rows x 4 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set diplay max_rows \n",
    "# pd.options.display.max_rows = 999\n",
    "\n",
    "# set display float_format 2 significant number\n",
    "pd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)\n",
    "\n",
    "# sort values by Difference%\n",
    "df_pf.sort_values(by=[\"Difference%\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fd45252-b081-4855-8126-5079f97b04df",
   "metadata": {},
   "source": [
    "##### Some Notes:  \n",
    "> In those last samples ```predictions``` are higher than ```targets``` ---> Maybe we are missing an important factor which drives the price of a used car lower, which maybe the ```car_model``` that we removed or maybe that car was damaged in some way (the information that we did not initally have)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae8860a1-eb75-48c5-9dff-7ff5ce21d09b",
   "metadata": {},
   "source": [
    "#### How to improve our model?\n",
    "1. Use a different set of variables \n",
    "2. Remove a bigger part of the ourliers in observations\n",
    "3. Use different kind of transformations"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
